#!/usr/bin/env bash

eDP_TOP="eDP-1"
eDP_BOTTOM="eDP-2"

# 3k model
prefered_resolution="2880x1800@120.000"
ui_scale=1.7475727796554565 # 1.75
# y offset = height of resolution / ui_scale (1800/1.7475... = 1030)
y_offset=1030
backlight="card1-$eDP_BOTTOM-backlight"

function suenv {
  sudo /usr/bin/env "$@"
}

function external-display-connected {
  [ "$(gnome-monitor-config list | grep display-name | grep -v 'Built-in display' | wc -l)" != "0" ]
}

function active-external-displays {
  gnome-monitor-config list | grep -vE 'eDP-[12]' | sed -nE 's/Monitor \[ (.+) \] ON/\1/p'
}

function get_current_mode {
  local monitor_name="$1"
  local monitor_config="$2"
  local in_monitor_section="no"
  local mode=""

  IFS=''
  while read -r line; do
    regex="^Monitor \\[ $monitor_name \\] ON$"
    if [[ $line =~ $regex ]]; then
      in_monitor_section="yes"
    elif [[ $in_monitor_section == "yes" ]]; then
      if [[ $line == "" ]]; then
        in_monitor_section="no"
      elif [[ $line =~ CURRENT$ ]]; then
        if [[ $line =~ id:\ \'([^\']+)\' ]]; then
          mode="${BASH_REMATCH[1]}"
          break
        fi
      fi
    fi
  done <<< "$monitor_config"

  echo "$mode"
}

function get_monitor_settings {
  local monitor_name="$1"
  local monitor_config="$2"

  local pos_and_size=""
  local scale=""
  local transform=""
  local primary="no"
  local in_logical_monitor="no"

  IFS=''
  while read -r line; do
    if [[ $line =~ ^Logical\ monitor\ \[([^]]+)\](,\ PRIMARY)?,\ scale\ =\ ([^,]+),\ transform\ =\ ([^ ]+)$ ]]; then
      pos_and_size="${BASH_REMATCH[1]}"
      if [[ -n "${BASH_REMATCH[2]}" ]]; then
        primary="yes"
      else
        primary="no"
      fi
      scale="${BASH_REMATCH[3]}"
      transform="${BASH_REMATCH[4]}"
      in_logical_monitor="yes"
    elif [[ $in_logical_monitor == "yes" && $line =~ ^[[:space:]]+$monitor_name$ ]]; then
      echo "$pos_and_size|$scale|$transform|$primary"
      return
    elif [[ $line == "" ]]; then
      in_logical_monitor="no"
    fi
  done <<< "$monitor_config"
}

function add_monitor_to_cmd {
  local monitor_name="$1"
  local monitor_config="$2"
  local cmd="$3"
  local x_override="$4"
  local y_override="$5"
  local scale_override="$6"
  local transform_override="$7"
  local primary_override="$8"

  # Get settings for monitor
  settings=$(get_monitor_settings "$monitor_name" "$monitor_config")
  IFS='|' read -r pos_and_size scale transform primary <<< "$settings"
  x=$(echo "$pos_and_size" | cut -d'+' -f2)
  y=$(echo "$pos_and_size" | cut -d'+' -f3)
  x=${x:-0}
  y=${y:-0}
  scale=${scale_override:-${scale:-$ui_scale}}
  transform=${transform_override:-$transform}
  primary=${primary_override:-$primary}

  mode=$(get_current_mode "$monitor_name" "$monitor_config")
  mode=${mode:-$prefered_resolution}

  x=${x_override:-$x}
  y=${y_override:-$y}

  cmd="$cmd -LM $monitor_name -m $mode -s $scale -x $x -y $y"
  if [[ -n "$transform" ]]; then
    cmd="$cmd -t $transform"
  fi
  if [[ $primary == "yes" ]]; then
    cmd="$cmd -p"
  fi

  echo "$cmd"
}

function add_external_monitors_to_cmd {
  local monitor_config="$1"
  local cmd="$2"

  for display in $(active-external-displays); do
    cmd=$(add_monitor_to_cmd "$display" "$monitor_config" "$cmd")
  done

  echo "$cmd"
}

case "$1" in
  set-displays)
    sleep 1
    "$0" normal
    ;;
  normal|bottom-up)
    if lsusb | grep -q 0b05:1b2c; then
      "$0" top
    else
      "$0" both
    fi
    ;;
  top)
    monitor_config=$(gnome-monitor-config list)
    cmd="gnome-monitor-config set"
    cmd=$(add_monitor_to_cmd "$eDP_TOP" "$monitor_config" "$cmd")
    cmd=$(add_external_monitors_to_cmd "$monitor_config" "$cmd")
    echo "Executing top command: $cmd"
    eval $cmd
    ;;
  both)
    monitor_config=$(gnome-monitor-config list)
    cmd="gnome-monitor-config set"

    # Get eDP_TOP settings
    settings_top=$(get_monitor_settings "$eDP_TOP" "$monitor_config")
    IFS='|' read -r pos_and_size_top scale_top transform_top primary_top <<< "$settings_top"
    x_top=$(echo "$pos_and_size_top" | cut -d'+' -f2)
    y_top=$(echo "$pos_and_size_top" | cut -d'+' -f3)
    x_top=${x_top:-0}
    y_top=${y_top:-0}

    # Calculate y position for eDP_BOTTOM
    y_bottom=$(( y_top + y_offset ))

    cmd=$(add_monitor_to_cmd "$eDP_TOP" "$monitor_config" "$cmd")
    cmd=$(add_monitor_to_cmd "$eDP_BOTTOM" "$monitor_config" "$cmd" "$x_top" "$y_bottom")
    cmd=$(add_external_monitors_to_cmd "$monitor_config" "$cmd")
    echo "Executing both command: $cmd"
    eval $cmd
    ;;
  bottom)
    gnome-monitor-config set \
      -LpM $eDP_BOTTOM -m $prefered_resolution -s $ui_scale -x 0 -y 0
    ;;
  left-up)
    gnome-monitor-config set \
      -LpM $eDP_BOTTOM -m $prefered_resolution -s $ui_scale -t left -x 0 -y 0 \
      -LM $eDP_TOP -m $prefered_resolution -s $ui_scale -t left -x $y_offset -y 0
    ;;
  right-up)
    gnome-monitor-config set \
      -LM $eDP_TOP -m $prefered_resolution -s $ui_scale -t right -x 0 -y 0 \
      -LpM $eDP_BOTTOM -m $prefered_resolution -s $ui_scale -t right -x $y_offset -y 0
    ;;
  status-internal)
    internal_monitors="$(gnome-monitor-config list | grep -E "Monitor \\[ eDP-. \\] ON")"
    case "$(echo "$internal_monitors" | grep -v -E "^$" | wc -l)" in
      0) echo "none" ;;
      1)
        case "$(echo "$internal_monitors" | grep ON)" in
          "Monitor [ $eDP_TOP ] ON") echo top ;;
          "Monitor [ $eDP_BOTTOM ] ON") echo bottom ;;
        esac ;;
      2) echo "both" ;;
    esac
    ;;
  status)
    active-external-displays | grep -vE "^$" | sed -z "s/\n/+/g"
    "$0" status-internal
    ;;
  toggle)
    if gnome-monitor-config list | grep OFF > /dev/null; then
      "$0" both
    else
      "$0" top
    fi
    ;;
  set-tablet-mapping)
    for type in tablets touchscreens; do
      dconf write "/org/gnome/desktop/peripherals/${type}/04f3:425b/output" \
        "['SDC', '0x419d', '0x00000000', '$eDP_TOP']"
      dconf write "/org/gnome/desktop/peripherals/${type}/04f3:425a/output" \
        "['SDC', '0x419d', '0x00000000', '$eDP_BOTTOM']"
    done
    ;;
  bat-limit)
    echo "${2:-80}" | suenv tee /sys/class/power_supply/BAT0/charge_control_end_threshold
    ;;
  sync-backlight)
    cat "/sys/class/backlight/intel_backlight/brightness" | \
      suenv tee /sys/class/backlight/$backlight/brightness
    ;;
  watch-backlight)
    "$0" sync-backlight
    while inotifywait -e modify /sys/class/backlight/intel_backlight/brightness; do
      "$0" sync-backlight
    done
    ;;
  watch-rotation)
    monitor-sensor --accel | \
      stdbuf -oL grep orientation | \
      stdbuf -oL cut -d: -f2 | \
      stdbuf -oL sed 's/[ )]//g' | \
      xargs -I '{}' stdbuf -oL "$0" '{}'
    ;;
  *) echo "Usage: duo <top|bottom|both|set-displays|toggle|status|set-tablet-mapping|bat-limit|sync-backlight|watch-backlight|watch-rotation>"
esac
